/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");
const axios = require("axios")

// *********************************************************** //
//  Loading models
// *********************************************************** //
const Piece = require('./models/Piece')
const Starred = require('./models/Starred')

// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const URL = 'https://collectionapi.metmuseum.org/public/collection/v1/objects'


// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require( 'mongoose' );
const mongodb_URI = 'mongodb+srv://iwang:BrandeisCS103@cluster0.9bkmh.mongodb.net/METGreekRomanSample?retryWrites=true&w=majority'

mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false); 
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});





// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
// app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// specify that the server should render the views/login.ejs page for the root path
// and the login.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.render("index");
});

app.get("/about", (req, res, next) => {
  res.render("about");
});

// search methods
app.get('/objects/:objectID',
  async (req,res,next) => {
    const {objectID} = req.params;
    const piece = await Piece.findOne({objectID:objectID})
    const userId = res.locals.user._id
    const lookup = await Starred.find({objectID,userId})
    if (lookup.length==0){
        res.locals.starred = false
    } else {
        res.locals.starred = true
    }
    res.locals.piece = piece
    res.render('piece')
  }
)

app.get('/search',
  async (req,res,next) => {
      res.render('search')
  }
)

app.post('/objects/byArtist',
  async (req,res,next) => {
    const artist = req.body.artist;
    var artistRegExp = new RegExp(artist, "gi")
    const pieces = await Piece.find({artistDisplayName:artistRegExp})
    res.locals.search = "artist"
    res.locals.pieces = pieces
    res.render('piecelist')
  }
)

app.post('/objects/byKeyword',
  async (req,res,next) => {
    const keyword = req.body.keyword;
    var keywordRegExp = new RegExp(keyword, "gi")
    const pieces = await Piece.find({title:keywordRegExp})
    res.locals.search = "keyword"
    res.locals.pieces = pieces
    res.render('piecelist')
  }
)

app.post('/objects/byDate',
  async (req,res,next) => {
    const date = req.body.date;
    const pieces = await Piece.find({objectBeginDate:{$lt:date},objectEndDate:{$gt:date}})
    res.locals.search = "date"
    res.locals.pieces = pieces
    res.render('piecelist')
  }
)

app.post('/objects/byCulture',
  async (req,res,next) => {
    const culture = req.body.culture;
    var cultureRegExp = new RegExp(culture, "gi")
    const pieces = await Piece.find({culture:cultureRegExp})
    res.locals.search = "culture"
    res.locals.pieces = pieces
    res.render('piecelist')
  }
)

app.post('/objects/byGallery',
  async (req,res,next) => {
    const gallery = req.body.gallery;
    const pieces = await Piece.find({GalleryNumber:gallery})
    res.locals.search = "gallery"
    res.locals.pieces = pieces
    res.render('piecelist')
  }
)


/* ************************
  Loading (or reloading) the data into a collection
   ************************ */
// this route loads in the courses into the Course collection
// or updates the courses if it is not a new collection

app.get('/upsertDB',
  async (req,res,next) => {
    const {data} = await axios.get(URL + '?departmentIds=11')
    const objectIDs = data.objectIDs.slice(1, 2000 + 1)
    let count = 0
    console.log(objectIDs.length)
    for (objectID of objectIDs){
        count = count + 1
        const {data} = await axios.get(URL + '/' + objectID)
        await Piece.findOneAndUpdate({objectID},data,{upsert:true})
        console.log(count)
    }
    const num = await Piece.find({}).count();
    res.send("data uploaded: "+num)
  }
)

// starred list methods
app.get('/addObject/:objectID',
  async (req,res,next) => {
    try {
      const objectID = req.params.objectID
      const userId = res.locals.user._id
      const lookup = await Starred.find({objectID,userId})
      if (lookup.length==0){
        const starred = new Starred({objectID,userId})
        await starred.save()
      }
      res.redirect('/starred/show')
    } catch(e){
      next(e)
    }
  })

  app.get('/starred/show',
  async (req,res,next) => {
    try{
      const userId = res.locals.user._id;
      const objectIds = (await Starred.find({userId})).map(x => x.objectID)
      console.log(objectIds)
      res.locals.pieces = await Piece.find({objectID:{$in: objectIds}})
      res.render('starred')
    } catch(e){
      next(e)
    }
  }
)

app.get('/starred/remove/:objectID',
  async (req,res,next) => {
    try {
      await Starred.remove(
                {userId:res.locals.user._id,
                 objectID:req.params.objectID})
      res.redirect('/starred/show')

    } catch(e){
      next(e)
    }
  }
)

app.use(isLoggedIn)

// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});











// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "4999";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
